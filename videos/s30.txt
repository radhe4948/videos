Slip 30
Q.1 
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char *argv[]) {
 int rank, size;
 int numbers[ARRAY_SIZE];
 int local_min = INT_MAX;
 int global_min;
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 srand(time(NULL) + rank);
 for (int i = 0; i < ARRAY_SIZE; i++) {
 numbers[i] = rand() % 1000; // Generate random numbers between 0 and 999
 }
 for (int i = 0; i < ARRAY_SIZE; i++) {
 if (numbers[i] < local_min) {
 local_min = numbers[i];
 }
 }
 MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
 if (rank == 0) {
 printf("Minimum number: %d\n", global_min);
 }
 MPI_Finalize();
 return 0;
}
Q.2 
#include <stdio.h>
#include <stdlib.h>
int main() {
 int n, start_position, total_head_movements = 0;
 printf("Enter the total number of disk blocks: ");
 scanf("%d", &n);
 int *requests = (int *)malloc(n * sizeof(int));
 printf("Enter the disk request string:\n");
 for (int i = 0; i < n; ++i) {
 scanf("%d", &requests[i]);
 }
 printf("Enter the starting head position: ");
 scanf("%d", &start_position);
 printf("Order of requests served: ");
 for (int i = 0; i < n; ++i) {
 printf("%d ", requests[i]);
 total_head_movements += abs(requests[i] - start_position);
 start_position = requests[i];
 }
 printf("\nTotal head movements: %d\n", total_head_movements);
 free(requests);
 return 0;
}