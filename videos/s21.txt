Slip 21
Q.1 
#include <stdio.h>
#include <stdlib.h>
int calculateHeadMovements(int *request_string, int n, int start_position) {
 int total_head_movements = 0;
 for (int i = 0; i < n; ++i) {
 total_head_movements += abs(request_string[i] - start_position);
 start_position = request_string[i];
 }
 
 return total_head_movements;
}
int main() {
 int request_string[] = {55, 58, 39, 18, 90, 160, 150, 38, 184};
 int n = sizeof(request_string) / sizeof(request_string[0]);
 int start_position = 50;
 printf("Disk Request String: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", request_string[i]);
 }
 printf("\nStarting Head Position: %d\n", start_position);
 int total_head_movements = calculateHeadMovements(request_string, n, 
start_position);
 
 printf("Order of service:\n");
 for (int i = 0; i < n; i++) {
 printf("%d -> ", request_string[i]);
 }
 printf("\nTotal number of head movements: %d\n", total_head_movements);
 return 0;
}
Q.2
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char **argv) {
 int rank, size;
 int sum_local = 0;
 int sum_global = 0;
 int numbers[ARRAY_SIZE];
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 srand(time(NULL) + rank);
 for (int i = 0; i < ARRAY_SIZE; i++) {
 numbers[i] = rand();
 }
 for (int i = 0; i < ARRAY_SIZE; i++) {
 if (numbers[i] % 2 == 0) {
 sum_local += numbers[i];
 }
 }
 MPI_Reduce(&sum_local, &sum_global, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
 if (rank == 0) {
 printf("The sum of all even numbers is: %d\n", sum_global);
 }
 MPI_Finalize();
 return 0;
}