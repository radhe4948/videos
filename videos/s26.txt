Slip 26
Q.1
#include <stdio.h>
#include <stdbool.h>
#define MAX_PROCESSES 5
#define MAX_RESOURCES 4
void calculateNeedMatrix(int need[MAX_PROCESSES][MAX_RESOURCES], int 
max[MAX_PROCESSES][MAX_RESOURCES], int allocation[MAX_PROCESSES][MAX_RESOURCES], 
int available[MAX_RESOURCES], int num_processes, int num_resources) {
 for (int i = 0; i < num_processes; i++) {
 for (int j = 0; j < num_resources; j++) {
 need[i][j] = max[i][j] - allocation[i][j];
 }
 }
}
bool isSafeState(int available[MAX_RESOURCES], int 
allocation[MAX_PROCESSES][MAX_RESOURCES], int need[MAX_PROCESSES][MAX_RESOURCES], 
int num_processes, int num_resources) {
 bool finish[MAX_PROCESSES] = { false };
 int work[MAX_RESOURCES];
 for (int i = 0; i < num_resources; i++) {
 work[i] = available[i];
 }
 int safeSeq[MAX_PROCESSES];
 int count = 0;
 while (count < num_processes) {
 bool found = false;
 for (int p = 0; p < num_processes; p++) {
 if (!finish[p]) {
 int j;
 for (j = 0; j < num_resources; j++) {
 if (need[p][j] > work[j])
 break;
 }
 if (j == num_resources) {
 for (int k = 0; k < num_resources; k++) {
 work[k] += allocation[p][k];
 }
 safeSeq[count++] = p;
 finish[p] = true;
 found = true;
 }
 }
 }
 if (!found) {
 printf("System is not in a safe state.\n");
 return false;
 }
 }
 printf("System is in a safe state.\nSafe sequence: ");
 for (int i = 0; i < num_processes; i++) {
 printf("P%d ", safeSeq[i]);
 }
 printf("\n");
 return true;
}
int main() {
 int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
 {0, 0, 1, 2},
 {1, 0, 0, 0},
 {1, 3, 5, 4},
 {0, 6, 3, 2},
 {0, 0, 1, 4}
 };
 int max[MAX_PROCESSES][MAX_RESOURCES] = {
 {1, 5, 2, 0},
 {1, 7, 5, 0},
 {2, 3, 5, 6},
 {0, 6, 5, 2},
 {0, 6, 5, 6}
 };
 int available[MAX_RESOURCES] = {1, 3, 3, 2};
 int need[MAX_PROCESSES][MAX_RESOURCES];
 calculateNeedMatrix(need, max, allocation, available, MAX_PROCESSES, 
MAX_RESOURCES);
 printf("Need Matrix:\n");
 for (int i = 0; i < MAX_PROCESSES; i++) {
 printf("P%d: ", i);
 for (int j = 0; j < MAX_RESOURCES; j++) {
 printf("%d ", need[i][j]);
 }
 printf("\n");
 }
 isSafeState(available, allocation, need, MAX_PROCESSES, MAX_RESOURCES);
 return 0;
}
Q.2 
#include <stdio.h>
#include <stdlib.h>
int calculateHeadMovements(int diskRequests[], int numRequests, int startHeadPos) {
 int totalHeadMovements = 0;
 int currentHeadPos = startHeadPos;
 for (int i = 0; i < numRequests; i++) {
 totalHeadMovements += abs(diskRequests[i] - currentHeadPos);
 currentHeadPos = diskRequests[i];
 }
 return totalHeadMovements;
}
int main() {
 int numBlocks, startHeadPos;
 printf("Enter the total number of disk blocks: ");
 scanf("%d", &numBlocks);
 int *diskRequests = (int *)malloc(numBlocks * sizeof(int));
 if (diskRequests == NULL) {
 printf("Memory allocation failed.\n");
 return 1;
 }
 printf("Enter the disk request string (separated by spaces): ");
 for (int i = 0; i < numBlocks; i++) {
 scanf("%d", &diskRequests[i]);
 }
 printf("Enter the start head position: ");
 scanf("%d", &startHeadPos);
 int totalHeadMovements = calculateHeadMovements(diskRequests, numBlocks, 
startHeadPos);
 printf("Order of disk requests served: ");
 for (int i = 0; i < numBlocks; i++) {
 printf("%d ", diskRequests[i]);
 }
 printf("\n");
 printf("Total number of head movements: %d\n", totalHeadMovements);
 free(diskRequests);
 return 0;
}