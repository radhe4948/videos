Slip 12
Q.1
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char *argv[]) {
 int rank, size;
 int array[ARRAY_SIZE];
 int local_sum = 0;
 double global_sum, global_average;
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 srand(time(NULL) + rank); 
 for (int i = 0; i < ARRAY_SIZE; i++) {
 array[i] = rand() % 1000; 
 }
 for (int i = 0; i < ARRAY_SIZE; i++) {
 local_sum += array[i];
 }
 MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
 if (rank == 0) {
 global_average = global_sum / (ARRAY_SIZE * size);
 printf("Sum: %.2f\n", global_sum);
 printf("Average: %.2f\n", global_average);
 }
 MPI_Finalize();
 return 0;
}
Q.2 
#include <stdio.h>
#include <stdlib.h>
 int total_head_movements = 0;
 for (int i = 0; i < n - 1; i++) {
 for (int j = 0; j < n - i - 1; j++) {
 if (request_string[j] > request_string[j + 1]) {
 int temp = request_string[j];
 request_string[j] = request_string[j + 1];
 request_string[j + 1] = temp;
 }
 }
 }
 int current_index = 0;
 for (int i = 0; i < n; i++) {
 if (request_string[i] >= start_position) {
 current_index = i;
 break;
 }
 }
 printf("Order of service: ");
 if (direction == 'L') {
 for (int i = current_index; i >= 0; i--) {
 total_head_movements += abs(start_position - request_string[i]);
 printf("%d -> ", request_string[i]);
 start_position = request_string[i];
 }
 for (int i = n - 1; i > current_index; i--) {
 total_head_movements += abs(start_position - request_string[i]);
 printf("%d -> ", request_string[i]);
 start_position = request_string[i];
 }
 } else if (direction == 'R') {
 for (int i = current_index; i < n; i++) {
 total_head_movements += abs(start_position - request_string[i]);
 printf("%d -> ", request_string[i]);
 start_position = request_string[i];
 }
 for (int i = 0; i < current_index; i++) {
 total_head_movements += abs(start_position - request_string[i]);
 printf("%d -> ", request_string[i]);
 start_position = request_string[i];
 }
 }
 printf("\nTotal number of head movements: %d\n", total_head_movements);
}
int main() {
 int request_string[] = {23, 89, 132, 42, 187, 69, 36, 55};
 int n = sizeof(request_string) / sizeof(request_string[0]);
 int start_position = 40;
 char direction = 'R'; 
 printf("Disk Request String: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", request_string[i]);
 }
 printf("\nStarting Head Position: %d\n", start_position);
 printf("Direction: %c\n", direction);
 printf("\nOrder of service:\n");
 c_look(request_string, n, start_position, direction);
 return 0;
}
