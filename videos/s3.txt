Slip 3
Q.1 
#include <stdio.h>
#include <stdbool.h>
#define MAX_PROCESSES 5
#define MAX_RESOURCES 4
int available[MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
bool finish[MAX_PROCESSES];
void initializeSystem() {
 int allocationArray[MAX_PROCESSES][MAX_RESOURCES] = {
 {0, 0, 1, 2},
 {1, 0, 0, 0},
 {1, 3, 5, 4},
 {0, 6, 3, 2},
 {0, 0, 1, 4}
 };
 int maxArray[MAX_PROCESSES][MAX_RESOURCES] = {
 {1, 5, 2, 0},
 {1, 7, 5, 0},
 {2, 3, 5, 6},
 {0, 6, 5, 2},
 {0, 6, 5, 6}
 };
 for (int i = 0; i < MAX_PROCESSES; i++) {
 for (int j = 0; j < MAX_RESOURCES; j++) {
 allocation[i][j] = allocationArray[i][j];
 max[i][j] = maxArray[i][j];
 need[i][j] = max[i][j] - allocation[i][j];
 }
 finish[i] = false;
 }
 printf("Enter available resources (A B C D): ");
 scanf("%d %d %d %d", &available[0], &available[1], &available[2], 
&available[3]);
}
bool findSafeSequence(int safeSequence[]) {
 int work[MAX_RESOURCES];
 for (int i = 0; i < MAX_RESOURCES; i++) {
 work[i] = available[i];
 }
 int count = 0;
 while (count < MAX_PROCESSES) {
 bool found = false;
 for (int i = 0; i < MAX_PROCESSES; i++) {
 if (!finish[i]) {
 bool canExecute = true;
 for (int j = 0; j < MAX_RESOURCES; j++) {
 if (need[i][j] > work[j]) {
 canExecute = false;
 break;
 }
 }
 if (canExecute) {
 for (int j = 0; j < MAX_RESOURCES; j++) {
 work[j] += allocation[i][j];
 }
 safeSequence[count++] = i;
 finish[i] = true;
 found = true;
 }
 }
 }
 if (!found) {
 return false;
 }
 }
 return true;
}
int main() {
 initializeSystem();
 printf("\nNeed Matrix:\n");
 for (int i = 0; i < MAX_PROCESSES; i++) {
 printf("P%d: ", i);
 for (int j = 0; j < MAX_RESOURCES; j++) {
 printf("%d ", need[i][j]);
 }
 printf("\n");
 }
 exists
 int safeSequence[MAX_PROCESSES];
 if (findSafeSequence(safeSequence)) {
 printf("\nSystem is in safe state.\nSafe Sequence: ");
 for (int i = 0; i < MAX_PROCESSES; i++) {
 printf("P%d ", safeSequence[i]);
 }
 printf("\n");
 } else {
 printf("\nSystem is not in safe state.\n");
 }
 return 0;
}

Q.2 
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#define ARRAY_SIZE 1000
int main(int argc, char *argv[]) {
 int rank, size;
 int local_sum = 0, global_sum = 0;
 double local_average = 0.0, global_average = 0.0;
 int data[ARRAY_SIZE];
 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);
 srand(rank);
 for (int i = 0; i < ARRAY_SIZE; i++) {
 data[i] = rand() % 100;
 }
 for (int i = 0; i < ARRAY_SIZE; i++) {
 local_sum += data[i];
 }
 MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
 local_average = (double)local_sum / ARRAY_SIZE;
 MPI_Reduce(&local_average, &global_average, 1, MPI_DOUBLE, MPI_SUM, 0, 
MPI_COMM_WORLD);
 if (rank == 0) {
 global_average /= size;
 printf("Global Sum: %d\n", global_sum);
 printf("Global Average: %.2f\n", global_average);
 }
 MPI_Finalize();
 return 0;
}
