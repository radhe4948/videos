Slip 19
Q.1 
#include <stdio.h>
#include <stdbool.h>
#define MAX_PROCESSES 5
#define MAX_RESOURCES 4
void calculateNeed(int need[MAX_PROCESSES][MAX_RESOURCES], int 
max[MAX_PROCESSES][MAX_RESOURCES], int allocation[MAX_PROCESSES][MAX_RESOURCES], 
int available[MAX_RESOURCES]) {
 for (int i = 0; i < MAX_PROCESSES; i++) {
 for (int j = 0; j < MAX_RESOURCES; j++) {
 need[i][j] = max[i][j] - allocation[i][j];
 }
 }
}
bool isSafeState(int processes[MAX_PROCESSES], int available[MAX_RESOURCES], int 
max[MAX_PROCESSES][MAX_RESOURCES], int allocation[MAX_PROCESSES][MAX_RESOURCES]) {
 int work[MAX_RESOURCES];
 bool finish[MAX_PROCESSES] = {false};
 for (int i = 0; i < MAX_RESOURCES; i++) {
 work[i] = available[i];
 }
 int count = 0;
 while (count < MAX_PROCESSES) {
 bool found = false;
 for (int i = 0; i < MAX_PROCESSES; i++) {
 if (!finish[i]) {
 int j;
 for (j = 0; j < MAX_RESOURCES; j++) {
 if (max[i][j] - allocation[i][j] > work[j]) {
 break;
 }
 }
 if (j == MAX_RESOURCES) {
 for (int k = 0; k < MAX_RESOURCES; k++) {
 work[k] += allocation[i][k];
 }
 finish[i] = true;
 processes[count++] = i;
 found = true;
 }
 }
 }
 if (!found) {
 break;
 }
 }
 return count == MAX_PROCESSES;
}
int main() {
 int allocation[MAX_PROCESSES][MAX_RESOURCES] = {
 {0, 3, 2, 4},
 {1, 2, 0, 1},
 {0, 0, 0, 0},
 {3, 3, 2, 2},
 {1, 4, 3, 2},
 {2, 4, 1, 4}
 };
 int max[MAX_PROCESSES][MAX_RESOURCES] = {
 {6, 5, 4, 4},
 {4, 4, 4, 4},
 {0, 0, 1, 2},
 {3, 9, 3, 4},
 {2, 5, 3, 3},
 {4, 6, 3, 4}
 };
 int available[MAX_RESOURCES] = {3, 4, 2, 1};
 int need[MAX_PROCESSES][MAX_RESOURCES];
 calculateNeed(need, max, allocation, available);
 printf("Need Matrix:\n");
 for (int i = 0; i < MAX_PROCESSES; i++) {
 printf("P%d: ", i);
 for (int j = 0; j < MAX_RESOURCES; j++) {
 printf("%d ", need[i][j]);
 }
 printf("\n");
 }
 int safeSequence[MAX_PROCESSES];
 if (isSafeState(safeSequence, available, max, allocation)) {
 printf("\nThe system is in a safe state.\nSafe Sequence: ");
 for (int i = 0; i < MAX_PROCESSES; i++) {
 printf("P%d ", safeSequence[i]);
 }
 printf("\n");
 } else {
 printf("\nThe system is not in a safe state.\n");
 }
 return 0;
}
Q.2
#include <stdio.h>
#include <stdlib.h>
void swap(int *a, int *b) {
 int temp = *a;
 *a = *b;
 *b = temp;
}
void sort(int *request_string, int n) {
 for (int i = 0; i < n - 1; i++) {
 for (int j = 0; j < n - i - 1; j++) {
 if (request_string[j] > request_string[j + 1]) {
 swap(&request_string[j], &request_string[j + 1]);
 }
 }
 }
}
void cScan(int *request_string, int n, int start_position) {
 int total_head_movements = 0;
 sort(request_string, n);
 total_head_movements += start_position;
 printf("%d -> ", start_position);
 for (int i = 0; i < n; i++) {
 if (request_string[i] >= start_position) {
 total_head_movements += abs(request_string[i] - start_position);
 printf("%d -> ", request_string[i]);
 start_position = request_string[i];
 }
 }
 total_head_movements += (199 - start_position); 
is 199
 printf("199 -> 0 -> ");
 total_head_movements += 199;
 printf("199 -> ");
 for (int i = 0; i < n; i++) {
 if (request_string[i] < start_position) {
 total_head_movements += abs(request_string[i] - start_position);
 printf("%d -> ", request_string[i]);
 start_position = request_string[i];
 }
 }
 printf("\nTotal number of head movements: %d\n", total_head_movements);
}
int main() {
 int request_string[] = {23, 89, 132, 42, 187, 69, 36, 55};
 int n = sizeof(request_string) / sizeof(request_string[0]);
 int start_position = 40;
 printf("Disk Request String: ");
 for (int i = 0; i < n; i++) {
 printf("%d ", request_string[i]);
 }
 printf("\nStarting Head Position: %d\n", start_position);
 printf("\nOrder of service:\n");
 cScan(request_string, n, start_position);
 return 0;
}